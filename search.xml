<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Django/Flask简介]]></title>
    <url>%2F2018%2F05%2F20%2FDjango-Flask%E7%AE%80%E4%BB%8B-md%2F</url>
    <content type="text"><![CDATA[Python网络框架网络框架指一组python包,它能够让开发者更加专注于网站应用业务逻辑的开发,而无须处理网络应用层的协议、线程、进程等方面，从而提高开发者的工作效率以及网络应用程序的质量。目前Python语言的十几个开发框架中,几乎所有的全栈网络框架都强制或引导开发者使用MVC架构开发Web应用.Python的四种主流框架为:Django/Flask/Tornado/Twisted此篇博文围绕Django/Flask讲解各自特点以及主要应用. MVC: MVC–M(Model):封装与应用程序相关的业务逻辑的数据及对数据的处理方法,是处理数据逻辑的部分.Model提供功能性接口,通过接口访问数据; MVC–V(View):负责数据的显示和呈现,View是对用户的直接输出; MVC–C(Controller):从用户端收集用户的输入,可以看作View的反向功能,Controller将用户作出的改变返回给Model,由Model在返回给View,Model作为数据中心,从而提高数据的一致性; ORM(Object-Relational Mapping 对象关系映射):是在关系型数据库和业务实体对象之间的映射,即开发者对对象与属性进行操作,而不用再去写复杂的sql语句,ORM必须具备三方面功能: 映射技术: 数据类型映射 类映射 关系映射 CRUD操作:(ORM将这些调用转换为SQL语句,通过引擎发送给数据库执行,将结果记录并转换为对象) create增加 Retrieve读取 Upadate更新 Delete删除 缓存优化:由于数据库的操作通常比较耗时,所以大多数ORM提供数据缓存优化的功能 DjangoDjango发布于2003年,是当前最成熟完整最广泛以及最富盛名的Python网络框架.Django定义了服务发布;路由映射;模板编程;数据处理的一整套功能.遵循MVC架构. 优点: 各模块之间结合紧密; 功能强大而相对封闭; 完整的在线文档及健全的开发社区; 具备自带优秀的ORM; 强大的URL映射技术; 后台管理系统自动生成; 用户多,第三方库丰富; 成熟稳定完善,适合企业级网站开发 缺点: 由于自带的丰富功能造成的冗余/耦合程度较高; 可能相对较重,比如开发小应用时,可能会不够灵活/自由; FlaskFlask发布于2010年,它吸收了其他框架的优点并且把自己的主要领域定义在微小项目上.作为微框架,安装时不会自动安装ORM数据组件等其他组件,所以开发者需要自行安装需要的组件. 优点: 内置开发服务器和调试器:Flask默认处于调试状态,运行时会将错误返回给控制台以及HTTP客户端; 与Python单元测试功能无缝连接:测试程序可以模拟进行HTTP访问的客户端来调用Flask路由处理函数,并且获取函数的输出来进行自定义的验证; 使用Jinja2模板,强大程度略高于Django的自带模板; 完全兼容WSGI 1.0 标准; 给予Unicode编码; 完美适合小型网站; 第三方库同样丰富; 开发灵活程度高,入门简单; 缺点: 很多东西需要从头构建; 用的第三方插件可能要踩的坑较多;]]></content>
      <categories>
        <category>Django</category>
        <category>Flask</category>
        <category>Web</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Django</tag>
        <tag>Flask</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell简介]]></title>
    <url>%2F2018%2F05%2F20%2Fmyshell%2F</url>
    <content type="text"><![CDATA[shell概念: shell是一个用C语言编写的程序,他是用户使用Linux的桥梁,它是一种命令语言,同事也是一种编程语言.用户可以通过Shell访问操作系统和内核服务.Linux的Shell种类众多,Bash是大多数Linux系统默认的Shell,所以我以Bash为例学习shell脚本编程. shell变量:变量的命名 命名只能使用,字母/数字/下划线 中间不能有空格 不能使用标点符号 不能与关键字重合 变量操作 使用: $变量名 或者 ${变量名} #!/bin/bash a=4 b=5 c=\`expr $a + $b\` echo $c 设置只读变量: 变量名 readonly 删除变量: unset 变量名 变量的赋值用’=’,需要注意的是等号两边不要有空格,比如a=1是对的,但是a = 1或a= 1都是错的,’command not found’ 变量的分类 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。 shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行 特殊变量有些变量是一开始执行脚本时就会设定,且不能被修改,但我们不叫它只读的系统变量,而叫它特殊变量 $* 这个程序的所有参数 $# 这个程序的参数个数 $$ 这个程序的PID $! 执行上一个后台程序的PID $? 执行上一个指令的返回值 shell中常用数据类型字符串: - 可以使用单引号也可以使用双引号,单引号表示原样字符串,单引号中变量或者转义符都会无效,单引号里也不能出现单引号; - 提取字符串长度 ${#变量名} - 字符串切片 ${变量名:开始位置:结束位置} 数组: - 数组的定义: 变量名=(值1 值2... 值n) - 数组的读取: ${变量名[下标]} 或 取所有元素用${变量名[@]} - 数组的长度: ${#变量名} 注释: - 以#开头的就是注释,会被解释器直接忽略 shell传参参数处理说明 $# 传递到脚本的参数个数$以一个单字符串显示所有向脚本传递的参数。如”$\“用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。$$ 脚本运行的当前进程ID号$! 后台运行的最后一个进程的ID号$@ 与$*相同，但是使用时加引号，并在引号中返回每个参数。如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。$-显示Shell使用的当前选项，与set命令功能相同。$?显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 shell运算符 由于原生bash不支持简单的数学运算,但是可以通过其他命令实现,例如awk/expr,其中expr最常用,expr是一款表达式计算工具,使用时要用撇号`包起来(撇号就是键盘上1左边的那个),而且需要注意的是它有严格的语法规范,表达式与运算符之间一定要有空格!例如`expr $a + $b`是对的,但是`expr $a+$b`是错误的! 算数运算符: 运算符 说明 举例 + 加法 expr $a + $b - 减法 expr $a - $b 乘法 `expr $a \ $b&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;/&lt;/td&gt; &lt;td&gt;整除法&lt;/td&gt; &lt;td&gt;expr $a / $b如expr 8 / 3结果为2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;%&lt;/td&gt; &lt;td&gt;取余&lt;/td&gt; &lt;td&gt;expr $a % $b` = 赋值 a=$b == 相等 $a == $b 判断是否相等 相等返回true 不相等返回false != 不相等 $a != $b 相等返回false 不相等返回true 关系运算符关系运算符只支持数字,不支持字符串,除非字符串的值是数字. 运算符 说明 -eq 检测两个数是否相等,相等返回true-ne 检测两个数是否不等于,不等返回true -gt 检测左边的数是否大于右边的,是就返回true -lt 检测左边的数是否小于右边的,是就返回true -ge 检测左边的数是否大于等于右边的,是就返回true -le 检测左边的数是否小于等于右边的,是就返回true 布尔运算: ! : 非运算符,[!true] 返回false-o: 或运算符,任一true 返回true -a: 与运算符,任一为false 返回false 逻辑运算符: &amp;&amp; 逻辑的AND|| 逻辑的OR 字符串运算符 = 检测两个字符串是否相等，相等返回 true &lt;br/!= 检测两个字符串是否相等，不相等返回 true &lt;br/-z 检测字符串长度是否为0，为0返回 true -n 检测字符串长度是否为0，不为0返回 true str 检测字符串是否为空，不为空返回 true 举例 a=’abc’ [$a]返回ture shell命令 shell echo命令: 用于字符串的输出 echo abc 和 echo “abc” 是一样的 可以显示普通字符串\转义字符\变量 echo &quot;Hello world&quot; #返回Hello world&lt;br/&gt; text=&quot;Hello world&quot;&lt;br/ echo $text #返回Hello world&lt;br/&gt; echo \&quot;Hello world\&quot;#返回&quot;Hello world&quot;&lt;br/&gt; 可以定向至文件 `echo &quot;Hello world&quot; &gt; test.log 会将&quot;Hello world&quot;定向输出到test.log中` 可以显示命令执行结果 echo `data`#注意是撇号,结果将显示目前的日期 echo `expr 2 + 3` #执行结果5 shell printf命令: 可以格式化字符串输出 格式替代符(%s %c %d %f) 可以转义序列 \a 警告字符 \b 后退 \c 抑制,结尾不换行且后面的格式字符串中的字符都会被忽略 \f 换页 \n 换行 \r 回车 \t 水平制表符 \v 垂直制表符 \\ 一个 \ shell test命令:test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。格式为 test 条件语句 测试字符串 test str1==str2 测试两个字符串是否相同 test str1 !=str2 测试两个字符串是否不同 test str1 测试是否为字符创 test -n str1或test -z str1 测试是否为空的字符串 测试整数 test int1 -eq int2 测试是否相等 test int1 -ne int2 测试是否不等 test int1 -le int2 测试是否小于等于 test int1 -lt int2 测试是否小于 test int1 -ge int2 测试是否大于等于 test int1 -gt int2 测试是否大于 测试文件 test -d file 测试是否为目录 test -f file 测试是否为文件 test -x file 测试是否是可执行文件 test -r file 测试是否是可读文件 test -w file 测试是否是可写文件 test -e file 测试文件是否存在 test -s file 测试文件是否为空 可简写 如 test -x file 可简写为 [ -x file ] 注意中括号旁一定加空格把执行命令括起来 shell 循环与分支 分支: if 和 if else 和 if elif else if 条件语句 then 条件为真执行语句 fi 也可以这样写为一行:if 条件语句; then 条件为真执行语句;fi 下面同理要么换行要么用&apos;;&apos; if 条件语句 then 条件为真执行语句 else 条件为假执行语句 fi if 条件1语句 then 条件1为真执行语句 elif 条件2语句 then 条件2为真执行语句 else 条件1与条件2都为假执行语句 fi 循环语句: for循环 while循环 until循环 case循环跳出循环break 跳出本次循环 continue 举例说明:返回0到100的整数和 #! /bin/bash sum=0 for ((i=0; i&lt;=100; i++)) do sum=`expr $sum + $i` done echo $sum #返回5050 #! /bin/bash i=0 while(($i&lt;=3)) do echo $i let &quot;i++&quot; done 运行脚本,输出: 0 1 2 3]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
</search>
