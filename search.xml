<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Django/Flask简介]]></title>
    <url>%2F2018%2F05%2F20%2FDjango-Flask%E7%AE%80%E4%BB%8B-md%2F</url>
    <content type="text"><![CDATA[Python网络框架网络框架指一组python包,它能够让开发者更加专注于网站应用业务逻辑的开发,而无须处理网络应用层的协议、线程、进程等方面，从而提高开发者的工作效率以及网络应用程序的质量。目前Python语言的十几个开发框架中,几乎所有的全栈网络框架都强制或引导开发者使用MVC架构开发Web应用.Python的四种主流框架为:Django/Flask/Tornado/Twisted此篇博文围绕Django/Flask讲解各自特点以及主要应用. MVC: MVC–M(Model):封装与应用程序相关的业务逻辑的数据及对数据的处理方法,是处理数据逻辑的部分.Model提供功能性接口,通过接口访问数据; MVC–V(View):负责数据的显示和呈现,View是对用户的直接输出; MVC–C(Controller):从用户端收集用户的输入,可以看作View的反向功能,Controller将用户作出的改变返回给Model,由Model在返回给View,Model作为数据中心,从而提高数据的一致性; ORM(Object-Relational Mapping 对象关系映射):是在关系型数据库和业务实体对象之间的映射,即开发者对对象与属性进行操作,而不用再去写复杂的sql语句,ORM必须具备三方面功能: 映射技术: 数据类型映射 类映射 关系映射 CRUD操作:(ORM将这些调用转换为SQL语句,通过引擎发送给数据库执行,将结果记录并转换为对象) create增加 Retrieve读取 Upadate更新 Delete删除 缓存优化:由于数据库的操作通常比较耗时,所以大多数ORM提供数据缓存优化的功能 DjangoDjango发布于2003年,是当前最成熟完整最广泛以及最富盛名的Python网络框架.Django定义了服务发布;路由映射;模板编程;数据处理的一整套功能.遵循MVC架构. 优点: 各模块之间结合紧密; 功能强大而相对封闭; 完整的在线文档及健全的开发社区; 具备自带优秀的ORM; 强大的URL映射技术; 后台管理系统自动生成; 用户多,第三方库丰富; 成熟稳定完善,适合企业级网站开发 缺点: 由于自带的丰富功能造成的冗余/耦合程度较高; 可能相对较重,比如开发小应用时,可能会不够灵活/自由; FlaskFlask发布于2010年,它吸收了其他框架的优点并且把自己的主要领域定义在微小项目上.作为微框架,安装时不会自动安装ORM数据组件等其他组件,所以开发者需要自行安装需要的组件. 优点: 内置开发服务器和调试器:Flask默认处于调试状态,运行时会将错误返回给控制台以及HTTP客户端; 与Python单元测试功能无缝连接:测试程序可以模拟进行HTTP访问的客户端来调用Flask路由处理函数,并且获取函数的输出来进行自定义的验证; 使用Jinja2模板,强大程度略高于Django的自带模板; 完全兼容WSGI 1.0 标准; 给予Unicode编码; 完美适合小型网站; 第三方库同样丰富; 开发灵活程度高,入门简单; 缺点: 很多东西需要从头构建; 用的第三方插件可能要踩的坑较多;]]></content>
      <categories>
        <category>Django</category>
        <category>Flask</category>
        <category>Web</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Django</tag>
        <tag>Flask</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell简介]]></title>
    <url>%2F2018%2F05%2F20%2Fmyshell%2F</url>
    <content type="text"><![CDATA[shell概念: shell是一个用C语言编写的程序,他是用户使用Linux的桥梁,它是一种命令语言,同事也是一种编程语言.用户可以通过Shell访问操作系统和内核服务.Linux的Shell种类众多,Bash是大多数Linux系统默认的Shell,所以我以Bash为例学习shell脚本编程. shell变量:变量的命名 命名只能使用,字母/数字/下划线 中间不能有空格 不能使用标点符号 不能与关键字重合 变量操作 使用: $变量名 或者 ${变量名} #!/bin/bash a=4 b=5 c=\`expr $a + $b\` echo $c 设置只读变量: 变量名 readonly 删除变量: unset 变量名 变量的赋值用’=’,需要注意的是等号两边不要有空格,比如a=1是对的,但是a = 1或a= 1都是错的,’command not found’ 变量的分类 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。 shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行 特殊变量有些变量是一开始执行脚本时就会设定,且不能被修改,但我们不叫它只读的系统变量,而叫它特殊变量 $* 这个程序的所有参数 $# 这个程序的参数个数 $$ 这个程序的PID $! 执行上一个后台程序的PID $? 执行上一个指令的返回值 shell中常用数据类型字符串: - 可以使用单引号也可以使用双引号,单引号表示原样字符串,单引号中变量或者转义符都会无效,单引号里也不能出现单引号; - 提取字符串长度 ${#变量名} - 字符串切片 ${变量名:开始位置:结束位置} 数组: - 数组的定义: 变量名=(值1 值2... 值n) - 数组的读取: ${变量名[下标]} 或 取所有元素用${变量名[@]} - 数组的长度: ${#变量名} 注释: - 以#开头的就是注释,会被解释器直接忽略]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
</search>
